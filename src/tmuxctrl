#!/bin/env bash
: "
Tmux controller
"

<<EOF
General Utilities
EOF

display_help()
{
    : "
    Display verbose messages
    "
    msg="$(cat <<EOF
Tmux Controller

- Synopsis/Syntax:
    $0 {options} [positionals] <arguments>
- Parameters
    - Positionals
        - p | panes [actions] {options} <arguments> : Manage tmux panes
            - Actions
                + m | move {options} : Pane movements
                    - Options
                        + -l | --left  : Move to the pane on the left
                        + -r | --right : Move to the pane on the right
                        + -u | --up    : Move to the pane above
                        + -d | --down  : Move to the pane below
        - s | session {options} <arguments> : Manage tmux sessions
            - Options
                - With Arguments
                    + -a [target-session-name]               | --attach [target-session-name]               : Attach to an existing session
                    + -c [new-session-name]                  | --create [new-session-name]                  : Create a new session
                    + -r [target-session] [new-session-name] | --rename [target-session] [new-session-name] : Rename a target session to a new session name
                - Flags
                    + -d | --detach : Detach from current session
                    + -p | --print : Print all session names
                    + -h | --help : Display this verbose help message
    - Optionals
        - With Arguments
        - Flags
            + -h | --help : Display this verbose help message
- Usage
    - Panes
        1. Move to the pane on the left, right, above or below
            $0 {p|pane} {m|move} {-l|-r|-u|-d}
    - Sessions
        1. Create a new session
            $0 {s|session} -c
        2. Attach to an existing session
            $0 {s|session} -a
        3. Detach from the current session
            $0 {s|session} -d
        4. List all existing sessions
            $0 {s|session} -p

    - General
        + Display this verbose help message
            $0 -h
EOF
)"
    echo -e "$msg"
}

get_tmux_sessions()
{
    : "
    Get all sessions and return them
    "
    # Initialize Variables
    declare -n tmux_sessions=$1

    # Get all tmux sessions
    tmux_all_sessions="$(tmux ls)"

    # Split multiline string into named reference array
    IFS=$'\n' read -d '\n' -a tmux_sessions <<< "$tmux_all_sessions"
}

get_tmux_session_Name()
{
    : "
    Cut up tmux session definition array into the session name
    "
    # Initialize Variables
    declare -n ret_Arr=$1

    # Get tmux session definition array
    get_tmux_sessions all_tmux_sessions

    # Print all sessions
    for curr_tmux_session_number in "${!all_tmux_sessions[@]}"; do
        curr_tmux_session="${all_tmux_sessions[$curr_tmux_session_number]}"
        curr_tmux_session_name="$(echo -e $curr_tmux_session | cut -d ':' -f1)"

        ret_Arr+=("$curr_tmux_session_name")
    done
}

<<EOF
Functional Utilities
EOF

attach_session()
{
    : "
    Request for a session name and  
    attach to the session
    "
    local SESSION_NAME="$1"

    if [[ "${SESSION_NAME}" == "" ]]; then
        # Print all sessions
        echo -e "All Sessions:"
        print_all_sessions

        # Get user input
        read -p "Session to Attach (Please enter the Session Name) > " target_session
    else
        target_session="$SESSION_NAME"
    fi

    # Attach session
    tmux attach-session -t "$target_session"
}

create_session()
{
    : "
    Request for a session name and  
    create new session
    "
    target_session_name="$1"

    # check if target session name is empty
    if [[ "$target_session_name" == "" ]]; then
        # Get user input
        read -p "New Session Name > " target_session_name
    fi

    # Attach session
    tmux new -s "$target_session_name"
}

print_all_sessions()
{
    : "
    Print all sessions
    "
    # Get all session names
    get_tmux_session_Name all_session_Names

    # Print all session names
    for session_id in "${!all_session_Names[@]}"; do
        session_Name="${all_session_Names[$session_id]}"
        echo -e "[$session_id] : $session_Name"
    done
}

detach_session()
{
    : "
    Detach from current session
    "
    tmux detach
}

<<EOF
System Utilities
EOF

main()
{
    argv=("$@")
    argc="${#argv[@]}"

    ### Command Line Arguments
    if [[ "${argc}" -gt 0 ]]; then
        # If there are Arguments
        while [[ "$1" != "" ]]; do
            # Loop through all current arguments
            case "$1" in
                "p" | "pane")
                    # Manage tmux panes
                    if [[ "$2" != "" ]]; then
                        pane_action="$2"
                        case "$pane_action" in
                            "m" | "move")
                                # Panel movements
                                if [[ "$3" != "" ]]; then
                                    pane_opts="$3"
                                    case "$pane_opts" in
                                        "-l" | "--left")
                                            # Move left
					    echo -e "Move Left"
                                            shift 1
                                            ;;
                                        "-r" | "--right")
                                            # Move right
					    echo -e "Move Right"
                                            shift 1
                                            ;;
                                        "-u" | "--up")
                                            # Move up
					    echo -e "Move Up"
                                            shift 1
                                            ;;
                                        "-d" | "--down")
                                            # Move down
					    echo -e "Move Down"
                                            shift 1
                                            ;;
                                        "-h" | "--help")
                                            # Display help menu and verbose messages
                                            display_help
                                            shift 1
                                            ;;
                                        *)
                                            # Invalid pane options
                                            echo -e "[X] Invalid panel option: $pane_opts"
                                            shift 1
                                            ;;
                                    esac
                                    shift 1
                                fi
                                shift 1
                                ;;
                            "-h" | "--help")
                                # Display help menu and verbose messages
                                display_help
                                shift 1
                                ;;
                            *)
                                # Invalid pane action
                                echo -e "[X] Invalid panel action: $pane_action"
                                shift 1
                                ;;
                        esac
                    else
                        echo -e "No pane option provided."
                    fi
                    shift 1
                    ;;
                "s" | "session")
                    # Manage tmux sessions
                    if [[ "$2" != "" ]]; then
                        session_opts="$2"
                        case "$session_opts" in
                            "-a" | "--attach")
                                # Attach session
                                target_session_name=""
                                if [[ "$3" != "" ]]; then
                                    # If there's an argument parsed
                                    target_session_name="$3"
                                    shift 1
                                fi
                                attach_session "$target_session_name"
                                shift 1
                                ;;
                            "-c" | "--create")
                                # Create session
                                new_session_name=""
                                if [[ "$3" != "" ]]; then
                                    # If there's an argument parsed
                                    new_session_name="$3"
                                    shift 1
                                fi
                                create_session "$new_session_name"
                                shift 1
                                ;;
                            "-d" | "--detach")
                                detach_session
                                shift 1
                                ;;
                            "-p" | "--print")
                                # List all sessions
                                print_all_sessions
                                shift 1
                                ;;
                            "--reattach")
                                # Detach from current session and reattach to another session
                                # Print all sessions
                                echo -e "All Sessions:"
                                print_all_sessions

                                # Get user input
                                read -p "Session to Attach (Please enter the Session Name) > " target_session

                                # Detach from current session and Re-attach to new session
                                tmux detach && tmux attach-session -t $target_session
                                shift 1
                                ;;
                            "-h" | "--help")
                                # Display help menu and verbose messages
                                display_help
                                shift 1
                                ;;
                            *)
                                # Invalid session option
                                echo -e "[X] Invalid session option"
                                shift 1
                                ;;
                        esac
                    else
                        echo -e "No session option provided."
                    fi
                    shift 1
                    ;;
                "-h" | "--help")
                    # Display help menu and verbose messages
                    display_help
                    shift 1
                    ;;
                *)
                    # Invalid Arguments
                    echo -e "Invalid Argument: $1"
                    shift 1
                    ;;
            esac
        done
    else
        # If there are no Arguments
        printf "No arguments provided.\n"
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
